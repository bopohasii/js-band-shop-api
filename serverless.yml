# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: js-band-shop-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1
  profile: bopohasii
  environment:
    BOOKS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: api/books/create.handler
    memorySize: 128
    description: 'create book'
    events:
      - http:
          path: /books
          method: POST

  list:
    handler: api/books/list.handler
    memorySize: 128
    description: 'return all stored books'
    events:
      - http:
          path: /books
          method: GET

  get:
    handler: api/books/get.handler
    memorySize: 128
    description: 'get book by bookId'
    events:
      - http:
          path: /books/{bookId}
          method: GET


  delete:
    handler: api/books/delete.handler
    memorySize: 128
    description: 'delete book by bookId'
    events:
      - http:
          path: /books/{bookId}
          method: DELETE

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BOOKS_TABLE}
